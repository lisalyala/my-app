{"version":3,"sources":["index.js"],"names":["Answer","props","className","onClick","value","Board","state","current_q","correct","answers","num","score","selected","correct_choice","i","data","incorrect","slice","push","shuffle","this","setState","question","parseAnswers","choices","items","entries","choice","selectAnswer","question_num","id","renderAnswers","nextQuestion","React","Component","array","length","j","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"2/FAKA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAWD,EAAMC,UAAWC,QAASF,EAAME,QAAnD,SACGF,EAAMG,Q,IAKPC,E,kDACJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,UAAW,uBACXC,QAAS,KACTC,QAAS,KACTC,IAAK,EACLC,MAAO,EACPC,SAAU,KACVC,gBAAgB,GATD,E,yDAaNC,GACX,IAAIL,EAAUM,EAAKD,GAAGE,UAAUC,QAGhC,OAFAR,EAAQS,KAAKH,EAAKD,GAAGN,SACrBW,EAAQV,GACDA,I,mCAGIK,GACX,GAAU,KAANA,EASF,OAPAM,KAAKC,SAAS,CACZd,UAAW,kDACXE,QAAS,KACTC,IAAK,EACLE,SAAU,YAEZO,EAAQJ,GAGD,GAALD,GAEFM,KAAKC,SAAS,CACZV,MAAO,IAGXS,KAAKC,SAAS,CACZd,UAAWQ,EAAKD,GAAGQ,SACnBd,QAASO,EAAKD,GAAGN,QACjBC,QAASW,KAAKG,aAAaT,GAC3BJ,IAAKI,EAAI,EACTF,SAAU,KACVC,gBAAgB,M,oCAINW,GAAU,IAAD,OACrB,GAAKA,EAAL,CAIA,IALqB,EAKfC,EAAQ,GALO,cAMSD,EAAQE,WANjB,kDAMFC,GANE,WAOfzB,EAAY,iBAEY,OAAxB,EAAKI,MAAMM,SACbV,GAAa,aACJ,EAAKI,MAAMO,eACpBX,GAAa,WACJ,EAAKI,MAAMM,WAAae,EACjCzB,GAAa,aACJ,EAAKI,MAAME,UAAYmB,IAChCzB,GAAa,YAEfuB,EAAMP,KACJ,cAAClB,EAAD,CACEE,UAAWA,EACXE,MAAOuB,EACPxB,QAAS,kBAAM,EAAKyB,aAAaD,QAhBvC,2BAAkD,IAN7B,8BA2BrB,OAAO,6BAAKF,O,mCAGDE,GACiB,OAAxBP,KAAKd,MAAMM,WAGXe,IAAWP,KAAKd,MAAME,QACxBY,KAAKC,SAAS,CACZT,SAAUe,EACVd,gBAAgB,EAChBF,MAAOS,KAAKd,MAAMK,MAAQ,IAG5BS,KAAKC,SAAS,CACZT,SAAUe,O,+BAKN,IAAD,OACHE,EAAeT,KAAKd,MAAMI,IAE9B,OACE,gCACE,oCAAOU,KAAKd,MAAMC,aAClB,mBAAGuB,GAAG,WACN,8BAAMV,KAAKW,cAAcX,KAAKd,MAAMG,WACpC,8BACE,wBACEP,UAAU,qBACVC,QAAS,kBAAM,EAAK6B,aAAaH,IAFnC,SAIG,WAGL,8BAAM,UAAYT,KAAKd,MAAMK,e,GAhHjBsB,IAAMC,WA2H1B,SAASf,EAAQgB,GACf,IAAK,IAAIrB,EAAIqB,EAAMC,OAAS,EAAGtB,EAAI,EAAGA,IAAK,CACzC,IAAIuB,EAAIC,KAAKC,MAAMD,KAAKE,UAAY1B,EAAI,IADC,EAElB,CAACqB,EAAME,GAAIF,EAAMrB,IAAvCqB,EAAMrB,GAFkC,KAE9BqB,EAAME,GAFwB,MAJ7CI,IAASC,OAAO,cAACrC,EAAD,IAAWsC,SAASC,eAAe,U","file":"static/js/main.81982aaa.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport data from \"./Apprentice_TandemFor400_Data\";\n\nfunction Answer(props) {\n  return (\n    <button className={props.className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_q: \"Press Next to begin!\",\n      correct: null,\n      answers: null,\n      num: 0,\n      score: 0,\n      selected: null,\n      correct_choice: false\n    };\n  }\n\n  parseAnswers(i) {\n    var answers = data[i].incorrect.slice();\n    answers.push(data[i].correct);\n    shuffle(answers);\n    return answers;\n  }\n\n  nextQuestion(i) {\n    if (i === 10) {\n      //We have reached the end of the round\n      this.setState({\n        current_q: \"All questions completed! Click to play again :)\",\n        answers: null,\n        num: 0,\n        selected: null\n      });\n      shuffle(data);\n      return;\n    }\n    if (i == 0) {\n      //We are at the beginning of a round\n      this.setState({\n        score: 0,\n      });\n    }\n    this.setState({\n      current_q: data[i].question,\n      correct: data[i].correct,\n      answers: this.parseAnswers(i),\n      num: i + 1,\n      selected: null,\n      correct_choice: false\n    });\n  }\n\n  renderAnswers(choices) {\n    if (!choices) {\n      // If there are no answers to display\n      return;\n    }\n    const items = [];\n    for (const [index, choice] of choices.entries()) {\n      let className = \"answers-button\";\n      // Logic to color the answers red or green\n      if (this.state.selected === null) {\n        className += \" highlight\";\n      } else if (this.state.correct_choice) {\n        className += \" correct\";\n      } else if (this.state.selected === choice) {\n        className += \" incorrect\";\n      } else if (this.state.correct === choice) {\n        className += \" correct\";\n      }\n      items.push(\n        <Answer\n          className={className}\n          value={choice}\n          onClick={() => this.selectAnswer(choice)}\n        />\n      );\n    }\n\n    return <ul>{items}</ul>;\n  }\n\n  selectAnswer(choice) {\n    if (this.state.selected !== null) {\n      return;\n    }\n    if (choice === this.state.correct) {\n      this.setState({\n        selected: choice,\n        correct_choice: true,\n        score: this.state.score + 1\n      });\n    } else {\n      this.setState({\n        selected: choice\n      });\n    }\n  }\n\n  render() {\n    let question_num = this.state.num;\n\n    return (\n      <div>\n        <div> {this.state.current_q}</div>\n        <p id=\"result\"></p>\n        <div>{this.renderAnswers(this.state.answers)}</div>\n        <div>\n          <button\n            className=\"next-button shadow\"\n            onClick={() => this.nextQuestion(question_num)}\n          >\n            {\"Next\"}\n          </button>\n        </div>\n        <div>{\"Score: \" + this.state.score}</div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(<Board />, document.getElementById(\"root\"));\n\n// Helper function to shuffle an array\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n"],"sourceRoot":""}